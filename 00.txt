#!/bin/bash
# Pattern:
# {
#   Group of commands to execute, but break if there is an error
# } || true          # if the whole file has set -e active, continue
# -----------------------------------------------------------

# Basics:
# -----------------------------------------------------------
if [ -f ~/.bashrc ]; then
    # echo "Adding 'stty -ixon' to .bashrc: don't freeze terminal when pressing ctrl-s"
    grep -q "stty -ixon" ~/.bashrc || echo 'stty -ixon' >> ~/.bashrc
    # make vi the default editor
    grep -q "export VISUAL" ~/.bashrc || echo 'export VISUAL=vi' >> ~/.bashrc
    grep -q "export EDITOR" ~/.bashrc || echo 'export EDITOR="$VISUAL"' >> ~/.bashrc
    # Default color for folders is hard to read, change to yellow/orange
    grep -q "export LS_COLORS=" ~/.bashrc || echo 'export LS_COLORS="$LS_COLORS:di=30;43:ow=30;42"' >> ~/.bashrc
    # auto-correct spelling mistakes in directory names:
    grep -q "shopt -s cdspell" ~/.bashrc || echo "shopt -s cdspell" >> ~/.bashrc
    if ! grep -q "~/.local/bin/" ~/.bashrc; then
        mkdir -p ~/.local/bin
        echo 'export PATH="~/.local/bin/:$PATH"' >> ~/.bashrc
    fi
    # grep -q "GIT_PS1_SHOWDIRTYSTATE=1" ~/.bashrc || echo 'GIT_PS1_SHOWDIRTYSTATE=1' >> ~/.bashrc
    # PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }__git_ps1 '\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]\[\033[00m\]' '\\\$ '"
fi
# on macOS / zsh
if [ -f ~/.zshrc ]; then
    [[ -f ~/.zshrc && ! $(grep "export LSCOLORS=" ~/.zshrc) ]]    && echo "export LSCOLORS=aDxfxcxdxbxegedabagacad" >> ~/.zshrc && echo "Added LSCOLORS to .zshrc."
fi
# -----------------------------------------------------------
# Better bash history
if [ -f ~/.bashrc ]; then
    grep -q "shopt -s histappend" ~/.bashrc || echo 'shopt -s histappend' >> ~/.bashrc
    grep -q "shopt -s cmdhist" ~/.bashrc || echo 'shopt -s cmdhist' >> ~/.bashrc
    grep -q "PROMPT_COMMAND" ~/.bashrc || echo "PROMPT_COMMAND='history -a'" >> ~/.bashrc
    grep -q "HISTIGNORE" ~/.bashrc || echo 'export HISTIGNORE="&:[ ]*:exit:ls:ll:bg:fg:history"' >> ~/.bashrc
    grep -q "HISTTIMEFORMAT" ~/.bashrc || echo "HISTTIMEFORMAT='%F %T '" >> ~/.bashrc
    # this might already be set in bashrc, but I think it's simpler to just append the new values
    grep -q "HISTSIZE=500000" ~/.bashrc || echo 'HISTSIZE=500000' >> ~/.bashrc
    grep -q "HISTFILESIZE=100000" ~/.bashrc || echo 'HISTFILESIZE=100000' >> ~/.bashrc
    grep -q 'HISTCONTROL="erasedups:ignoreboth"' ~/.bashrc || echo 'HISTCONTROL="erasedups:ignoreboth"' >> ~/.bashrc
fi
# -----------------------------------------------------------
# By default don't grep in the .git folder and tags files, but don't overwrite
# the Ubuntu defaults in bashrc:
if ! grep -q "alias grep='grep --color=auto --exclude-dir=\".git\" --exclude=tags'" ~/.bashrc; then
    if grep -q "alias grep='grep --color=auto'" ~/.bashrc; then
        sed -i "s|alias grep='grep --color=auto'|alias grep='grep --color=auto --exclude-dir=\".git\" --exclude=tags'|" ~/.bashrc
    else
        echo "alias grep='grep --color=auto --exclude-dir=\".git\" --exclude=tags'" >> ~/.bashrc
    fi
fi
# -----------------------------------------------------------
if [ ! -f ~/.inputrc ]; then
    touch ~/.inputrc
fi
grep -q '$include /etc/inputrc' ~/.inputrc || echo '$include /etc/inputrc' >> ~/.inputrc
grep -q 'set completion-ignore-case On' ~/.inputrc || echo 'set completion-ignore-case On' >> ~/.inputrc
grep -q 'set show-all-if-ambiguous On' ~/.inputrc || echo 'set show-all-if-ambiguous On' >> ~/.inputrc
grep -q 'set bell-style none' ~/.inputrc || echo 'set bell-style none' >> ~/.inputrc
# -----------------------------------------------------------
# Ask user for yes/no
ask_yes_no() {
    local question="$1"
    while true; do
        read -p "$question (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Yes or No (y or n).";;
        esac
    done
}
# -----------------------------------------------------------
{
    set -e
    if ! command -v git > /dev/null; then
        if command -v apt > /dev/null; then
            # trying to install git
            echo "Installing git via apt-get"
            sudo apt install git
        else
            echo "git is not available!"
        fi
    fi
} || true
# -----------------------------------------------------------
{
    set -e
    if ask_yes_no "Do you want to mount the local Synology NAS?"; then
        if command -v apt-get > /dev/null; then
            sudo apt-get --ignore-missing install cifs-utils
        fi
        echo 'Creating ~/nas directory'
        mkdir -p ~/nas
        chmod 750 nas
        if ! grep -q "//192.168.0.15/home /home/$USER/nas" /etc/fstab; then
            echo Adding home drive to /etc/fstab
            sudo sh -c "echo //192.168.0.15/home /home/$USER/nas cifs user,noauto,credentials=/home/$USER/.smbcredentials,iocharset=utf8 0 0 >> /etc/fstab"
        fi
        echo "Creating file: .smbcredentials password=XXXXX is not added, so that we don't store a plaintext password here"
        echo username=jan > ~/.smbcredentials
        echo domain=WORKGROUP >> ~/.smbcredentials
        chmod 600 ~/.smbcredentials

        echo Mounting ~/nas
        sudo mount -a
        mount ~/nas

        # Import SSH keys from Synology NAS
        if ask_yes_no "Do you want to import SSH keys from Synology NAS?"; then
            mkdir -p ~/.ssh
            if [ ! -f ~/.ssh/id_rsa ]; then
                cp ~/nas/05_Accounts/01_Private_Keys/ssh_key/id_rsa ~/.ssh/
            else
                echo "id_rsa already exists"
            fi
            if [ ! -f ~/.ssh/id_rsa.pub ]; then
                cp ~/nas/05_Accounts/01_Private_Keys/ssh_key/id_rsa.pub ~/.ssh/
            else
                echo "id_rsa.pub already exists"
            fi
            chmod 700 ~/.ssh/id_rsa
            eval `ssh-agent -s`
            ssh-add
            echo "Copy to remote host (user $USER needs to exist there):"
            echo "ssh-copy-id -i /home/$USER/.ssh/id_rsa.pub $USER@example.host"
        fi

        # trying to install gnupg
        if command -v gpg >/dev/null; then
            if ask_yes_no "Do you want to install gnupg via apt-get?"; then
                if command -v apt-get > /dev/null; then
                    echo "Installing gnupg"
                    sudo apt install gnupg
                fi
            fi
        fi
        # Import GPG keys from Synology NAS
        if command -v gpg >/dev/null; then
            if ask_yes_no "Do you want to import GPG keys from Synology NAS?"; then
                echo "Restore GPG keys"
                gpg --import ~/nas/05_Accounts/01_Private_Keys/gpg/janzwiener.asc
                gpg --import-ownertrust ~/nas/05_Accounts/01_Private_Keys/gpg/janzwiener-ownertrust-gpg.txt

                echo "Checking imported keys"
                gpg --list-secret-keys --keyid-format LONG

                echo "Adding GPG key to bash profile..."
                test -r ~/.bash_profile && echo 'export GPG_TTY=$(tty)' >> ~/.bash_profile
                echo 'export GPG_TTY=$(tty)' >> ~/.profile

                echo "Automatically sign git commits"
                if [ -z "$(git config --global user.signingkey)" ]; then
                    git config --global user.signingkey 3952417BAF66D6F2
                    git config --global commit.gpgsign true
                    git config --global user.name "Jan Zwiener"
                    git config --global user.email "jan@zwiener.org"
                    git config --global core.editor "vi"
                fi
            fi
        else
            echo "GPG not installed, no keys imported"
        fi
    fi
} || true
# -----------------------------------------------------------
{
    set -e
    if command -v fzf > /dev/null; then
        echo "fzf detected, not installing"
    else
        if ask_yes_no "Do you want to install FZF with git from github directly?"; then
            git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
            ~/.fzf/install
        fi
    fi
} || true
# -----------------------------------------------------------
{
    set -e
    if ask_yes_no "Do you want to install an up-to-date Vim via apt-get?"; then
        # try to install git and Vim
        if command -v apt-get > /dev/null; then
            sudo apt install vim vim-gtk3
            # trying to upgrade
            sudo add-apt-repository ppa:jonathonf/vim && sudo apt update && sudo apt upgrade vim
        fi
    fi
} || true
# -----------------------------------------------------------
{
    # set -e # here we don't want to break on an error here
    if ask_yes_no "Do you want to install your Vim config from github?"; then
        # the ~/.vim directory does not exist
        git clone git@github.com:jnz/dotvim.git ~/.vim
        # Check if the cloning failed
        if [ $? -ne 0 ]; then
            echo "SSH clone failed, retrying with HTTPS..."
            git clone https://github.com/jnz/dotvim.git ~/.vim
        fi
        cd ~/.vim
        chmod 600 ~/.vim/ctrlpcache
        git submodule update --init --recursive
        # adding some default to .vimrc.local if it does not exist
        if [ ! -f ~/.vimrc.local ]; then
            echo "if g:is_gui" >> ~/.vimrc.local
            echo "    colorscheme blueshift" >> ~/.vimrc.local
            echo "else" >> ~/.vimrc.local
            echo "    colorscheme wombat256" >> ~/.vimrc.local
            echo "endif" >> ~/.vimrc.local
            echo "if has('termguicolors')" >> ~/.vimrc.local
            echo "    set termguicolors" >> ~/.vimrc.local
            echo "endif" >> ~/.vimrc.local
        fi
        # echo 'export PATH="~/.vim/tools/ripgrep_linux/:$PATH"' >> ~/.bashrc
        ln -s ~/.vim/vimrc ~/.vimrc
        ln -s ~/.vim/gvimrc ~/.gvimrc
        # Visual Studio Code
        echo "Setting up Visual Studio Code config"
        mkdir -p ~/.config/Code/User
        ln -s ~/.vim/vscode/settings.json ~/.config/Code/User/settings.json
        ln -s ~/.vim/vscode/keybindings.json ~/.config/Code/User/keybindings.json
    fi
} || true
# -----------------------------------------------------------
{
    # set -e errors are ok in this section
    if ask_yes_no "Do you want to install common tools via apt-get"; then
        sudo apt-get --ignore-missing install build-essential
        sudo apt-get --ignore-missing install net-tools
        sudo apt-get --ignore-missing install ripgrep
        sudo apt-get --ignore-missing install tree
        sudo apt-get --ignore-missing install keepass2 iperf3 etherwake terminator
        # Try installing universal-ctags
        sudo apt-get install -y universal-ctags
        # Check if the installation failed
        if [ $? -ne 0 ]; then
            echo "Failed to install universal-ctags, retrying with exuberant-ctags..."
            sudo apt-get install -y exuberant-ctags
        fi
        echo ""
        echo "Install manually: synology cloudstation, Discord, Visual Studio Code"
        echo ""
        echo "Additional:"
        echo " - ubuntu-restricted-extras"
        echo " - chromium-browser"
        echo " - ffmpeg"
        echo " - filezilla"
        echo " - gnome-tweaks (Alt-Drag)"
        echo ""
    fi
} || true
# -----------------------------------------------------------
{
    set -e
    if ask_yes_no "Do you want to set RTC to local timezone?"; then
        echo "Disable timezone in UTC: timedatectl set-local-rtc 1 --adjust-system-clock"
        sudo timedatectl set-local-rtc 1 --adjust-system-clock
    fi
} || true
# -----------------------------------------------------------
{
    set -e
    if ask_yes_no "Do you want to install Python via apt-get?"; then
        # Virtual PIP environment
        # Setup
        # -----
        sudo apt-get --ignore-missing install python3
        sudo apt-get --ignore-missing install python3-pip python3-venv
        python3 -m pip install --user virtualenv
        sudo apt-get install python-is-python3
    fi
    # Create virtual environment
    # --------------------------
    #
    # python3 -m venv mytestenvironment
    #
    # Activate virtual environment
    # ----------------------------
    #
    # source mytestenvironment/bin/activate
    #
    # Deactivate environment
    # ----------------------
    #
    # deactivate
    #
    # Python Installer: pip install -U pyinstaller
} || true
# -----------------------------------------------------------
# Menu Entry
#   sudo grep menuentry /boot/grub/grub.cfg
#
# Search for e.g. "Windows Boot Manager (on /dev/nvme0n1p1)"
#
#   sudo vi /etc/default/grub
#
#   GRUB_DEFAULT="Windows Boot Manager (on /dev/nvme0n1p1)"
#
#   sudo update-grub
#
# -----------------------------------------------------------
echo ""
echo "Bash shortcuts:"
echo "ctrl-r        - search the bash history."
echo "ctrl-u        - clear line"
echo "ctrl-w        - delete last word"
echo "ctrl-x ctrl-e - edit current command line in editor"
echo "ctrl-y        - paste back deleted"
echo "alt-b         - word back"
echo "alt-f         - word forward"
echo "ctrl-a        - jump to start of line"
echo "ctrl-e        - end of line"
echo "Command \"fc\": edit and rerun last command"
echo ""
echo "lscpu lsblk lstopo atop"
echo "free -mht"
echo "lsb_release -a"
echo ""
echo ""
echo "Find:"
echo "  find . -iname '*example*'"
echo ""
echo "grep:"
echo "  grep -ri 'text' ."
echo ""
echo "For Linux x86/x64 some portable tools are installed in .vim/tools/ripgrep_linux"

